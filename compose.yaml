version: 1.0.0
services:
  webapp:
    container_name: authentication-app
    user: "${UID}:${GID}"
    build:
      context: authentication-app
      no_cache: true
    volumes:
      - ./authentication-app/authentication:/app/authentication
    environment:
      - SERVER_NAME=0.0.0.0
      - FLASK_SERVER_PORT=8000
      - FLASK_APP=authentication
      - FLASK_DEBUG=1
    networks:
      - web-data
    ports:
      - 8000:8000
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    stop_signal: SIGINT
    privileged: true
    tty: true
    stdin_open: true

  # Caching Database
  # db_cache:
  #   container_name: database-cache-redis
  #   image: redis
  #   restart: always
  
  # CoAP Server
  # coap_server:
  #   container_name: server-coap
  #   build:
  #     context: coap-server
  #     no_cache: false
  #   volumes:
  #     - ./coap-server:/app/
  #   restart: always
  #   ports:
  #     - 5683:5683/udp
  
  # CoAP Server Ubuntu 20.04
  coap_server-2:
    container_name: ubuntu-coap-server
    build:
      context: coap-server-2
      no_cache: false
    volumes:
      - ./coap-server-2:/app/
    restart: always
    network_mode: host
    ports:
      - 80:80/udp
      - 5683:5683/udp
  
  # MQTT Broker
  # mosquitto:
  #   container_name: mosquitto
  #   image: eclipse-mosquitto
  #   volumes:
  #     - "./mosquitto-broker/config:/mosquitto/config"
  #     - "./mosquitto-broker/log:/mosquitto/log"
  #     - "./mosquitto-broker/data/:/mosquitto/data"
  #   restart: always
  #   ports:
  #     - "1883:1883"

networks:
  web-data:
    driver: bridge
# Docker Network Drivers - https://docs.docker.com/network/drivers/ 

# -------------------------------------------------------------------
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

